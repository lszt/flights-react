{
  "rules": {
    "departures": {
      ".read": true,
      ".indexOn": [
        "dateTime",
        "negativeTimestamp"
      ],
      "$departure_id": {
        ".write": "!root.child('settings/lockDate').exists() ||
                   (!data.exists() && newData.exists() && newData.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24) ||
                   (data.exists() && !newData.exists() && data.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24) ||
                   (data.exists() && newData.exists() && data.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24 && newData.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24)",
        ".validate": "newData.hasChildren(['aircraftType', 'dateTime', 'departureRoute', 'duration', 'firstname', 'flightType', 'immatriculation', 'lastname', 'location', 'mtow', 'negativeTimestamp', 'runway'])",
        "aircraftType": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "carriageVoucher": {
          ".validate": "newData.parent().child('passengerCount').val() === 0 || (newData.val() === 'yes' || newData.val() === 'no')"
        },
        "dateTime": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)"
        },
        "departureRoute": {
          ".validate": "newData.val() === 'south' || newData.val() === 'matzingen' || (newData.val() === 'circuits' && newData.parent().child('location').val().toUpperCase() === 'LSZT')"
        },
        "duration": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d{2}:\\d{2}$/)"
        },
        "firstname": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "flightType": {
          ".validate": "newData.val() === 'private' || newData.val() === 'commercial' || newData.val() === 'instruction'"
        },
        "immatriculation": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "lastname": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "location": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "memberNr": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d+$/)"
        },
        "mtow": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "negativeTimestamp": {
          ".validate": "newData.isNumber() && newData.val() < 0"
        },
        "passengerCount": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "phone": {
          ".validate": "newData.isString()"
        },
        "remarks": {
          ".validate": "newData.isString()"
        },
        "route": {
          ".validate": "newData.isString()"
        },
        "runway": {
          ".validate": "newData.val() === '06' || newData.val() === '24'"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "arrivals": {
      ".read": true,
      ".indexOn": [
        "dateTime",
        "negativeTimestamp"
      ],
      "$arrival_id": {
        ".write": "!root.child('settings/lockDate').exists() ||
                   (!data.exists() && newData.exists() && newData.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24) ||
                   (data.exists() && !newData.exists() && data.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24) ||
                   (data.exists() && newData.exists() && data.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24 && newData.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24)",
        ".validate": "newData.hasChildren(['aircraftType', 'arrivalRoute', 'dateTime', 'firstname', 'flightType', 'immatriculation', 'landingCount', 'lastname', 'location', 'mtow', 'negativeTimestamp', 'runway'])",
        "aircraftType": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "arrivalRoute": {
          ".validate": "newData.val() === 'north' || newData.val() === 'south' || (newData.val() === 'circuits' && newData.parent().child('location').val().toUpperCase() === 'LSZT')"
        },
        "dateTime": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)"
        },
        "firstname": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "flightType": {
          ".validate": "newData.val() === 'private' || newData.val() === 'commercial' || newData.val() === 'instruction'"
        },
        "immatriculation": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "landingCount": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "lastname": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "location": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "memberNr": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d+$/)"
        },
        "mtow": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "negativeTimestamp": {
          ".validate": "newData.isNumber() && newData.val() < 0"
        },
        "passengerCount": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "phone": {
          ".validate": "newData.isString()"
        },
        "remarks": {
          ".validate": "newData.isString()"
        },
        "runway": {
          ".validate": "newData.val() === '06' || newData.val() === '24'"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "aircrafts": {
      ".read": true,
      ".write": true,
      ".indexOn": [
        "type"
      ]
    },
    "users": {
      ".read": true,
      ".write": true,
      ".indexOn": [
        "memberNr"
      ]
    },
    "aerodromes": {
      ".read": true,
      ".write": true,
      ".indexOn": [
        "name"
      ]
    },
    "settings": {
      ".read": true,
      ".write": true
    }
  }
}
